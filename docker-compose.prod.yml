version: '3.8'

services:
  # Main Database (MySQL) - Production
  db-main:
    image: mysql:8.0
    container_name: api_absensi_db_main_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${PROD_MAIN_PASSWORD}
      MYSQL_DATABASE: ${PROD_MAIN_DATABASE}
      MYSQL_USER: ${PROD_MAIN_USERNAME}
      MYSQL_PASSWORD: ${PROD_MAIN_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_main_prod_data:/var/lib/mysql
      - ./docker/mysql/prod-init:/docker-entrypoint-initdb.d
    networks:
      - api_absensi_prod_network
    command: --default-authentication-plugin=mysql_native_password

  # Master Database (MySQL) - Production
  db-master:
    image: mysql:8.0
    container_name: api_absensi_db_master_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${PROD_MASTER_PASSWORD}
      MYSQL_DATABASE: ${PROD_MASTER_DATABASE}
      MYSQL_USER: ${PROD_MASTER_USERNAME}
      MYSQL_PASSWORD: ${PROD_MASTER_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - db_master_prod_data:/var/lib/mysql
      - ./docker/mysql/master-prod-init:/docker-entrypoint-initdb.d
    networks:
      - api_absensi_prod_network
    command: --default-authentication-plugin=mysql_native_password

  # API Application - Production
  api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: api_absensi_app_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      # Main Database
      PROD_MAIN_USERNAME: ${PROD_MAIN_USERNAME}
      PROD_MAIN_PASSWORD: ${PROD_MAIN_PASSWORD}
      PROD_MAIN_DATABASE: ${PROD_MAIN_DATABASE}
      PROD_MAIN_HOST: db-main
      PROD_MAIN_DIALECT: mysql
      PROD_MAIN_PORT: 3306
      # Master Database
      PROD_MASTER_USERNAME: ${PROD_MASTER_USERNAME}
      PROD_MASTER_PASSWORD: ${PROD_MASTER_PASSWORD}
      PROD_MASTER_DATABASE: ${PROD_MASTER_DATABASE}
      PROD_MASTER_HOST: db-master
      PROD_MASTER_DIALECT: mysql
      PROD_MASTER_PORT: 3306
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      # Firebase
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY_ID: ${FIREBASE_PRIVATE_KEY_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_CLIENT_ID: ${FIREBASE_CLIENT_ID}
      FIREBASE_AUTH_URI: ${FIREBASE_AUTH_URI}
      FIREBASE_TOKEN_URI: ${FIREBASE_TOKEN_URI}
      FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${FIREBASE_AUTH_PROVIDER_X509_CERT_URL}
      FIREBASE_CLIENT_X509_CERT_URL: ${FIREBASE_CLIENT_X509_CERT_URL}
      PORT: 3000
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db-main
      - db-master
    networks:
      - api_absensi_prod_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: api_absensi_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - api_absensi_prod_network

volumes:
  db_main_prod_data:
  db_master_prod_data:

networks:
  api_absensi_prod_network:
    driver: bridge
